server {
    listen 443 http2 ssl;
    listen [::]:443 http2 ssl;

    server_name cloudcity.starlingwatch.com;
#    server_name 34.221.14.206;

#    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
#    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
#    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    ssl on;
    ssl_certificate /etc/ssl/cloudcity/certificate.crt; 
    ssl_certificate_key  /etc/ssl/cloudcity/private.key;




    ########################################################################
    # from https://cipherlist.eu/                                            #
    ########################################################################
    
    ssl_protocols TLSv1.2 TLSv1.1 TLSv1.3;# Requires nginx >= 1.13.0 else use TLSv1.2
    ssl_prefer_server_ciphers on;
    ssl_ciphers EECDH+AESGCM:EDH+AESGCM;
    ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
    ssl_session_timeout  10m;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off; # Requires nginx >= 1.5.9
    ssl_stapling on; # Requires nginx >= 1.3.7
    ssl_stapling_verify on; # Requires nginx => 1.3.7
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    # Disable preloading HSTS for now.  You can use the commented out header line that includes
    # the "preload" directive if you understand the implications.
    #add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    ##################################
    # END https://cipherlist.eu/ BLOCK #
    ##################################

    
    root /usr/share/nginx/html;

    location / {
	proxy_pass http://localhost:3000;
	client_max_body_size 200M;
   }

    error_page 404 /404.html;
    location = /404.html {
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
    }
}

server {
    listen 80;
    listen [::]:80;
    server_name cloudcity.starlingwatch.com;
    return 301 https://$host$request_uri;
}
