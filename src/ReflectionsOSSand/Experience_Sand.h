/* Autogenerated by sand_branch_apply_v2.sh */
#ifndef EXPERIENCE_SAND_H
#define EXPERIENCE_SAND_H

#include "Experience.h"
#include <Arduino.h>

class AccelSensor;
class TOF;
extern AccelSensor accel;
extern TOF tof;

class Arduino_GFX;
extern Arduino_GFX *gfx;

#define sandname F("Sand ")

class Experience_Sand : public Experience
{
  public:
    Experience_Sand();
    virtual void setup() override;
    virtual void run() override;
    virtual void teardown() override;

  private:
    static constexpr uint16_t W = 240;
    static constexpr uint16_t H = 240;

    static constexpr uint16_t MAX_PARTICLES   = 2400;
    static constexpr uint16_t SETUP_PARTICLES = 1400;

    static constexpr uint8_t  MAX_ZONES = 4;
    struct Zone {
      uint16_t cx, cy;
      uint8_t  r;
      bool     active;
      unsigned long createdMs;
    };

    static constexpr int16_t GRAVITY_SCALE_Q88 = 220;

    // 0.985 * 256 ≈ 252  (nice, slightly “sandy” damping)
    // Use 255 if you want very light damping (~0.996)
    static constexpr int16_t FRICTION_Q88      = 252;

    static constexpr int16_t VEL_CAP_Q88 = 512; // ~2 px/ms cap

    static constexpr uint16_t TOF_MIN_MM       = 180;
    static constexpr uint16_t TOF_MAX_MM       = 400;
    static constexpr uint8_t  ZONE_R_MIN       = 10;
    static constexpr uint8_t  ZONE_R_MAX       = 26;
    static constexpr uint16_t ZONE_INACTIVE_TIMEOUT_MS = 250;
    static constexpr uint16_t TEARDOWN_MS      = 900;

    uint16_t    count_;
    uint16_t    x_[MAX_PARTICLES];
    uint16_t    y_[MAX_PARTICLES];
    int16_t     vx_[MAX_PARTICLES];
    int16_t     vy_[MAX_PARTICLES];
    uint8_t     live_[MAX_PARTICLES];

    Zone        zones_[MAX_ZONES];
    uint8_t     zoneCount_;

    unsigned long phaseStartMs_;
    unsigned long lastFrameMs_;
    unsigned long lastFpsStampMs_;
    uint16_t framesThisSec_;
    uint16_t fps_;

    enum Phase { PH_SETUP, PH_RUN, PH_TEARDOWN, PH_DONE } phase_;

    void clearScreen();
    inline void erasePixel(uint16_t px, uint16_t py);
    inline void drawPixel(uint16_t px, uint16_t py);

    void seedRandomGrains(uint16_t n);
    void seedRandomVelocity(uint16_t i, int8_t magQ88);
    void readTiltQ88(int16_t &gxQ88, int16_t &gyQ88);

    void beginFrame();
    void endFrame();

    void stepSetup(uint32_t dtMs, int16_t gxQ88, int16_t gyQ88);
    void stepRun(uint32_t dtMs, int16_t gxQ88, int16_t gyQ88);
    void stepTeardown(uint32_t dtMs);

    void applyOne(uint16_t i, int16_t axQ88, int16_t ayQ88);
    void integrate(uint16_t i, uint32_t dtMs);

    void updateZonesFromTOF();
    void addOrUpdateZone(uint16_t sx, uint16_t sy, uint8_t r);
    void expireStaleZones(unsigned long now);
    bool resolveBlocking(uint16_t &nx, uint16_t &ny, int16_t &vxQ, int16_t &vyQ);

    int findFree();
    void recycleOne();
};

#endif // EXPERIENCE_SAND_H

